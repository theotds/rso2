//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `mpk.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <mpk.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 >= 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 6
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit<::MPK::noSuchLine> iceC_MPK_noSuchLine_init("::MPK::noSuchLine");

const ::IceInternal::DefaultUserExceptionFactoryInit<::MPK::noSuchTram> iceC_MPK_noSuchTram_init("::MPK::noSuchTram");

const ::std::string iceC_MPK_SIP_ids[2] =
{
    "::Ice::Object",
    "::MPK::SIP"
};
const ::std::string iceC_MPK_SIP_ops[] =
{
    "addLine",
    "getLines",
    "getStop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "removeLine"
};
const ::std::string iceC_MPK_SIP_getLines_name = "getLines";
const ::std::string iceC_MPK_SIP_addLine_name = "addLine";
const ::std::string iceC_MPK_SIP_removeLine_name = "removeLine";
const ::std::string iceC_MPK_SIP_getStop_name = "getStop";

const ::IceInternal::DefaultUserExceptionFactoryInit<::MPK::noSuchUser> iceC_MPK_noSuchUser_init("::MPK::noSuchUser");

const ::std::string iceC_MPK_Stop_ids[2] =
{
    "::Ice::Object",
    "::MPK::Stop"
};
const ::std::string iceC_MPK_Stop_ops[] =
{
    "getArrivals",
    "getID",
    "getLines",
    "getName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "registerUser",
    "unregisterUser"
};
const ::std::string iceC_MPK_Stop_getLines_name = "getLines";
const ::std::string iceC_MPK_Stop_getID_name = "getID";
const ::std::string iceC_MPK_Stop_getName_name = "getName";
const ::std::string iceC_MPK_Stop_getArrivals_name = "getArrivals";
const ::std::string iceC_MPK_Stop_registerUser_name = "registerUser";
const ::std::string iceC_MPK_Stop_unregisterUser_name = "unregisterUser";

const ::std::string iceC_MPK_Line_ids[2] =
{
    "::Ice::Object",
    "::MPK::Line"
};
const ::std::string iceC_MPK_Line_ops[] =
{
    "addTram",
    "getStops",
    "getTrams",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "removeTram"
};
const ::std::string iceC_MPK_Line_getTrams_name = "getTrams";
const ::std::string iceC_MPK_Line_getStops_name = "getStops";
const ::std::string iceC_MPK_Line_addTram_name = "addTram";
const ::std::string iceC_MPK_Line_removeTram_name = "removeTram";

const ::std::string iceC_MPK_Tram_ids[2] =
{
    "::Ice::Object",
    "::MPK::Tram"
};
const ::std::string iceC_MPK_Tram_ops[] =
{
    "getID",
    "getSchedule",
    "getStop",
    "getStopTime",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "registerUser",
    "unregisterUser"
};
const ::std::string iceC_MPK_Tram_getStop_name = "getStop";
const ::std::string iceC_MPK_Tram_getStopTime_name = "getStopTime";
const ::std::string iceC_MPK_Tram_getID_name = "getID";
const ::std::string iceC_MPK_Tram_getSchedule_name = "getSchedule";
const ::std::string iceC_MPK_Tram_registerUser_name = "registerUser";
const ::std::string iceC_MPK_Tram_unregisterUser_name = "unregisterUser";

const ::std::string iceC_MPK_User_ids[2] =
{
    "::Ice::Object",
    "::MPK::User"
};
const ::std::string iceC_MPK_User_ops[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "updateSchedule",
    "updateStop"
};
const ::std::string iceC_MPK_User_updateStop_name = "updateStop";
const ::std::string iceC_MPK_User_updateSchedule_name = "updateSchedule";

}

MPK::noSuchLine::~noSuchLine()
{
}

const ::std::string&
MPK::noSuchLine::ice_staticId()
{
    static const ::std::string typeId = "::MPK::noSuchLine";
    return typeId;
}

MPK::noSuchTram::~noSuchTram()
{
}

const ::std::string&
MPK::noSuchTram::ice_staticId()
{
    static const ::std::string typeId = "::MPK::noSuchTram";
    return typeId;
}

MPK::noSuchUser::~noSuchUser()
{
}

const ::std::string&
MPK::noSuchUser::ice_staticId()
{
    static const ::std::string typeId = "::MPK::noSuchUser";
    return typeId;
}

bool
MPK::SIP::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_MPK_SIP_ids, iceC_MPK_SIP_ids + 2, s);
}

::std::vector<::std::string>
MPK::SIP::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_MPK_SIP_ids[0], &iceC_MPK_SIP_ids[2]);
}

::std::string
MPK::SIP::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
MPK::SIP::ice_staticId()
{
    static const ::std::string typeId = "::MPK::SIP";
    return typeId;
}

/// \cond INTERNAL
bool
MPK::SIP::_iceD_getLines(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    lines ret = this->getLines(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::SIP::_iceD_addLine(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<LinePrx> iceP_line;
    istr->readAll(iceP_line);
    inS.endReadParams();
    this->addLine(::std::move(iceP_line), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::SIP::_iceD_removeLine(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<LinePrx> iceP_line;
    istr->readAll(iceP_line);
    inS.endReadParams();
    this->removeLine(::std::move(iceP_line), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::SIP::_iceD_getStop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_ID;
    istr->readAll(iceP_ID);
    inS.endReadParams();
    ::std::shared_ptr<StopPrx> ret = this->getStop(iceP_ID, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::SIP::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_MPK_SIP_ops, iceC_MPK_SIP_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_MPK_SIP_ops)
    {
        case 0:
        {
            return _iceD_addLine(in, current);
        }
        case 1:
        {
            return _iceD_getLines(in, current);
        }
        case 2:
        {
            return _iceD_getStop(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_removeLine(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
MPK::Stop::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_MPK_Stop_ids, iceC_MPK_Stop_ids + 2, s);
}

::std::vector<::std::string>
MPK::Stop::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_MPK_Stop_ids[0], &iceC_MPK_Stop_ids[2]);
}

::std::string
MPK::Stop::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
MPK::Stop::ice_staticId()
{
    static const ::std::string typeId = "::MPK::Stop";
    return typeId;
}

/// \cond INTERNAL
bool
MPK::Stop::_iceD_getLines(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    lines ret = this->getLines(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Stop::_iceD_getID(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    int ret = this->getID(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Stop::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Stop::_iceD_getArrivals(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    arrivals ret = this->getArrivals(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Stop::_iceD_registerUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_user;
    istr->readAll(iceP_user);
    inS.endReadParams();
    this->registerUser(::std::move(iceP_user), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Stop::_iceD_unregisterUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_user;
    istr->readAll(iceP_user);
    inS.endReadParams();
    this->unregisterUser(::std::move(iceP_user), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Stop::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_MPK_Stop_ops, iceC_MPK_Stop_ops + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_MPK_Stop_ops)
    {
        case 0:
        {
            return _iceD_getArrivals(in, current);
        }
        case 1:
        {
            return _iceD_getID(in, current);
        }
        case 2:
        {
            return _iceD_getLines(in, current);
        }
        case 3:
        {
            return _iceD_getName(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_registerUser(in, current);
        }
        case 9:
        {
            return _iceD_unregisterUser(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
MPK::Line::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_MPK_Line_ids, iceC_MPK_Line_ids + 2, s);
}

::std::vector<::std::string>
MPK::Line::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_MPK_Line_ids[0], &iceC_MPK_Line_ids[2]);
}

::std::string
MPK::Line::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
MPK::Line::ice_staticId()
{
    static const ::std::string typeId = "::MPK::Line";
    return typeId;
}

/// \cond INTERNAL
bool
MPK::Line::_iceD_getTrams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    trams ret = this->getTrams(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Line::_iceD_getStops(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    stops ret = this->getStops(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Line::_iceD_addTram(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<TramPrx> iceP_tram;
    istr->readAll(iceP_tram);
    inS.endReadParams();
    this->addTram(::std::move(iceP_tram), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Line::_iceD_removeTram(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<TramPrx> iceP_tram;
    istr->readAll(iceP_tram);
    inS.endReadParams();
    this->removeTram(::std::move(iceP_tram), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Line::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_MPK_Line_ops, iceC_MPK_Line_ops + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_MPK_Line_ops)
    {
        case 0:
        {
            return _iceD_addTram(in, current);
        }
        case 1:
        {
            return _iceD_getStops(in, current);
        }
        case 2:
        {
            return _iceD_getTrams(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_removeTram(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
MPK::Tram::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_MPK_Tram_ids, iceC_MPK_Tram_ids + 2, s);
}

::std::vector<::std::string>
MPK::Tram::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_MPK_Tram_ids[0], &iceC_MPK_Tram_ids[2]);
}

::std::string
MPK::Tram::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
MPK::Tram::ice_staticId()
{
    static const ::std::string typeId = "::MPK::Tram";
    return typeId;
}

/// \cond INTERNAL
bool
MPK::Tram::_iceD_getStop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::std::shared_ptr<StopPrx> ret = this->getStop(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Tram::_iceD_getStopTime(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    int iceP_stopid;
    istr->readAll(iceP_stopid);
    inS.endReadParams();
    TimeOfDay ret = this->getStopTime(iceP_stopid, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Tram::_iceD_getID(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    int ret = this->getID(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Tram::_iceD_getSchedule(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    schedule ret = this->getSchedule(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Tram::_iceD_registerUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_user;
    istr->readAll(iceP_user);
    inS.endReadParams();
    this->registerUser(::std::move(iceP_user), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Tram::_iceD_unregisterUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<UserPrx> iceP_user;
    istr->readAll(iceP_user);
    inS.endReadParams();
    this->unregisterUser(::std::move(iceP_user), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Tram::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_MPK_Tram_ops, iceC_MPK_Tram_ops + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_MPK_Tram_ops)
    {
        case 0:
        {
            return _iceD_getID(in, current);
        }
        case 1:
        {
            return _iceD_getSchedule(in, current);
        }
        case 2:
        {
            return _iceD_getStop(in, current);
        }
        case 3:
        {
            return _iceD_getStopTime(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_registerUser(in, current);
        }
        case 9:
        {
            return _iceD_unregisterUser(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

bool
MPK::User::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_MPK_User_ids, iceC_MPK_User_ids + 2, s);
}

::std::vector<::std::string>
MPK::User::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_MPK_User_ids[0], &iceC_MPK_User_ids[2]);
}

::std::string
MPK::User::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
MPK::User::ice_staticId()
{
    static const ::std::string typeId = "::MPK::User";
    return typeId;
}

/// \cond INTERNAL
bool
MPK::User::_iceD_updateStop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<TramPrx> iceP_tram;
    ::std::shared_ptr<StopPrx> iceP_stop;
    istr->readAll(iceP_tram, iceP_stop);
    inS.endReadParams();
    this->updateStop(::std::move(iceP_tram), ::std::move(iceP_stop), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::User::_iceD_updateSchedule(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::std::shared_ptr<StopPrx> iceP_stop;
    arrivals iceP_arr;
    istr->readAll(iceP_stop, iceP_arr);
    inS.endReadParams();
    this->updateSchedule(::std::move(iceP_stop), ::std::move(iceP_arr), current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::User::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_MPK_User_ops, iceC_MPK_User_ops + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_MPK_User_ops)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_updateSchedule(in, current);
        }
        case 5:
        {
            return _iceD_updateStop(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond INTERNAL
void
MPK::SIPPrx::_iceI_getLines(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::MPK::lines>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MPK_SIP_getLines_name);
    outAsync->invoke(iceC_MPK_SIP_getLines_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPK::SIPPrx::_iceI_addLine(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<LinePrx>& iceP_line, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_MPK_SIP_addLine_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_line);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPK::SIPPrx::_iceI_removeLine(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<LinePrx>& iceP_line, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MPK_SIP_removeLine_name);
    outAsync->invoke(iceC_MPK_SIP_removeLine_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_line);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const noSuchLine&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
void
MPK::SIPPrx::_iceI_getStop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::MPK::StopPrx>>>& outAsync, int iceP_ID, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MPK_SIP_getStop_name);
    outAsync->invoke(iceC_MPK_SIP_getStop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_ID);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
MPK::SIPPrx::_newInstance() const
{
    return ::IceInternal::createProxy<SIPPrx>();
}
/// \endcond

const ::std::string&
MPK::SIPPrx::ice_staticId()
{
    return SIP::ice_staticId();
}

/// \cond INTERNAL
void
MPK::StopPrx::_iceI_getLines(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::MPK::lines>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MPK_Stop_getLines_name);
    outAsync->invoke(iceC_MPK_Stop_getLines_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPK::StopPrx::_iceI_getID(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MPK_Stop_getID_name);
    outAsync->invoke(iceC_MPK_Stop_getID_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPK::StopPrx::_iceI_getName(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::string>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MPK_Stop_getName_name);
    outAsync->invoke(iceC_MPK_Stop_getName_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPK::StopPrx::_iceI_getArrivals(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::MPK::arrivals>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MPK_Stop_getArrivals_name);
    outAsync->invoke(iceC_MPK_Stop_getArrivals_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPK::StopPrx::_iceI_registerUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_user, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_MPK_Stop_registerUser_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_user);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPK::StopPrx::_iceI_unregisterUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_user, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MPK_Stop_unregisterUser_name);
    outAsync->invoke(iceC_MPK_Stop_unregisterUser_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_user);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const noSuchUser&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
MPK::StopPrx::_newInstance() const
{
    return ::IceInternal::createProxy<StopPrx>();
}
/// \endcond

const ::std::string&
MPK::StopPrx::ice_staticId()
{
    return Stop::ice_staticId();
}

/// \cond INTERNAL
void
MPK::LinePrx::_iceI_getTrams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::MPK::trams>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MPK_Line_getTrams_name);
    outAsync->invoke(iceC_MPK_Line_getTrams_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPK::LinePrx::_iceI_getStops(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::MPK::stops>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MPK_Line_getStops_name);
    outAsync->invoke(iceC_MPK_Line_getStops_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPK::LinePrx::_iceI_addTram(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<TramPrx>& iceP_tram, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_MPK_Line_addTram_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_tram);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPK::LinePrx::_iceI_removeTram(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<TramPrx>& iceP_tram, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MPK_Line_removeTram_name);
    outAsync->invoke(iceC_MPK_Line_removeTram_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_tram);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const noSuchTram&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
MPK::LinePrx::_newInstance() const
{
    return ::IceInternal::createProxy<LinePrx>();
}
/// \endcond

const ::std::string&
MPK::LinePrx::ice_staticId()
{
    return Line::ice_staticId();
}

/// \cond INTERNAL
void
MPK::TramPrx::_iceI_getStop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::std::shared_ptr<::MPK::StopPrx>>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MPK_Tram_getStop_name);
    outAsync->invoke(iceC_MPK_Tram_getStop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPK::TramPrx::_iceI_getStopTime(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::MPK::TimeOfDay>>& outAsync, int iceP_stopid, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MPK_Tram_getStopTime_name);
    outAsync->invoke(iceC_MPK_Tram_getStopTime_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_stopid);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPK::TramPrx::_iceI_getID(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<int>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MPK_Tram_getID_name);
    outAsync->invoke(iceC_MPK_Tram_getID_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPK::TramPrx::_iceI_getSchedule(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::MPK::schedule>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MPK_Tram_getSchedule_name);
    outAsync->invoke(iceC_MPK_Tram_getSchedule_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPK::TramPrx::_iceI_registerUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_user, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_MPK_Tram_registerUser_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_user);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPK::TramPrx::_iceI_unregisterUser(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<UserPrx>& iceP_user, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_MPK_Tram_unregisterUser_name);
    outAsync->invoke(iceC_MPK_Tram_unregisterUser_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_user);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const noSuchUser&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
MPK::TramPrx::_newInstance() const
{
    return ::IceInternal::createProxy<TramPrx>();
}
/// \endcond

const ::std::string&
MPK::TramPrx::ice_staticId()
{
    return Tram::ice_staticId();
}

/// \cond INTERNAL
void
MPK::UserPrx::_iceI_updateStop(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<TramPrx>& iceP_tram, const ::std::shared_ptr<StopPrx>& iceP_stop, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_MPK_User_updateStop_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_tram, iceP_stop);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
void
MPK::UserPrx::_iceI_updateSchedule(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::std::shared_ptr<StopPrx>& iceP_stop, const arrivals& iceP_arr, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_MPK_User_updateSchedule_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_stop, iceP_arr);
        },
        nullptr);
}
/// \endcond

/// \cond INTERNAL
::std::shared_ptr<::Ice::ObjectPrx>
MPK::UserPrx::_newInstance() const
{
    return ::IceInternal::createProxy<UserPrx>();
}
/// \endcond

const ::std::string&
MPK::UserPrx::ice_staticId()
{
    return User::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_MPK_SIP_getLines_name = "getLines";

const ::std::string iceC_MPK_SIP_addLine_name = "addLine";

const ::std::string iceC_MPK_SIP_removeLine_name = "removeLine";

const ::std::string iceC_MPK_SIP_getStop_name = "getStop";

const ::std::string iceC_MPK_Stop_getLines_name = "getLines";

const ::std::string iceC_MPK_Stop_getID_name = "getID";

const ::std::string iceC_MPK_Stop_getName_name = "getName";

const ::std::string iceC_MPK_Stop_getArrivals_name = "getArrivals";

const ::std::string iceC_MPK_Stop_registerUser_name = "registerUser";

const ::std::string iceC_MPK_Stop_unregisterUser_name = "unregisterUser";

const ::std::string iceC_MPK_Line_getTrams_name = "getTrams";

const ::std::string iceC_MPK_Line_getStops_name = "getStops";

const ::std::string iceC_MPK_Line_addTram_name = "addTram";

const ::std::string iceC_MPK_Line_removeTram_name = "removeTram";

const ::std::string iceC_MPK_Tram_getStop_name = "getStop";

const ::std::string iceC_MPK_Tram_getStopTime_name = "getStopTime";

const ::std::string iceC_MPK_Tram_getID_name = "getID";

const ::std::string iceC_MPK_Tram_getSchedule_name = "getSchedule";

const ::std::string iceC_MPK_Tram_registerUser_name = "registerUser";

const ::std::string iceC_MPK_Tram_unregisterUser_name = "unregisterUser";

const ::std::string iceC_MPK_User_updateStop_name = "updateStop";

const ::std::string iceC_MPK_User_updateSchedule_name = "updateSchedule";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::MPK::noSuchLine> iceC_MPK_noSuchLine_init("::MPK::noSuchLine");

}

#ifdef ICE_CPP11_COMPILER
MPK::noSuchLine::~noSuchLine()
{
}
#else
MPK::noSuchLine::~noSuchLine() throw()
{
}
#endif

::std::string
MPK::noSuchLine::ice_id() const
{
    return "::MPK::noSuchLine";
}

MPK::noSuchLine*
MPK::noSuchLine::ice_clone() const
{
    return new noSuchLine(*this);
}

void
MPK::noSuchLine::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
MPK::noSuchLine::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::MPK::noSuchLine", -1, true);
    ::Ice::StreamWriter< noSuchLine, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
MPK::noSuchLine::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< noSuchLine, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::MPK::noSuchTram> iceC_MPK_noSuchTram_init("::MPK::noSuchTram");

}

#ifdef ICE_CPP11_COMPILER
MPK::noSuchTram::~noSuchTram()
{
}
#else
MPK::noSuchTram::~noSuchTram() throw()
{
}
#endif

::std::string
MPK::noSuchTram::ice_id() const
{
    return "::MPK::noSuchTram";
}

MPK::noSuchTram*
MPK::noSuchTram::ice_clone() const
{
    return new noSuchTram(*this);
}

void
MPK::noSuchTram::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
MPK::noSuchTram::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::MPK::noSuchTram", -1, true);
    ::Ice::StreamWriter< noSuchTram, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
MPK::noSuchTram::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< noSuchTram, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::MPK::noSuchUser> iceC_MPK_noSuchUser_init("::MPK::noSuchUser");

}

#ifdef ICE_CPP11_COMPILER
MPK::noSuchUser::~noSuchUser()
{
}
#else
MPK::noSuchUser::~noSuchUser() throw()
{
}
#endif

::std::string
MPK::noSuchUser::ice_id() const
{
    return "::MPK::noSuchUser";
}

MPK::noSuchUser*
MPK::noSuchUser::ice_clone() const
{
    return new noSuchUser(*this);
}

void
MPK::noSuchUser::ice_throw() const
{
    throw *this;
}

/// \cond STREAM
void
MPK::noSuchUser::_writeImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice("::MPK::noSuchUser", -1, true);
    ::Ice::StreamWriter< noSuchUser, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
MPK::noSuchUser::_readImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< noSuchUser, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::MPK::upCast(SIP* p) { return p; }

void
::IceProxy::MPK::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< SIP>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new SIP;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::MPK::SIP::_iceI_begin_getLines(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MPK_SIP_getLines_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_SIP_getLines_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_SIP_getLines_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_MPK_SIP_getLines_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::MPK::lines
IceProxy::MPK::SIP::end_getLines(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MPK_SIP_getLines_name);
    ::MPK::lines ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::MPK::SIP::_iceI_begin_addLine(const ::MPK::LinePrx& iceP_line, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_SIP_addLine_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_SIP_addLine_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_line);
        result->endWriteParams();
        result->invoke(iceC_MPK_SIP_addLine_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::MPK::SIP::end_addLine(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_MPK_SIP_addLine_name);
}

::Ice::AsyncResultPtr
IceProxy::MPK::SIP::_iceI_begin_removeLine(const ::MPK::LinePrx& iceP_line, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MPK_SIP_removeLine_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_SIP_removeLine_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_SIP_removeLine_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_line);
        result->endWriteParams();
        result->invoke(iceC_MPK_SIP_removeLine_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::MPK::SIP::end_removeLine(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MPK_SIP_removeLine_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::MPK::noSuchLine&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::MPK::SIP::_iceI_begin_getStop(::Ice::Int iceP_ID, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MPK_SIP_getStop_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_SIP_getStop_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_SIP_getStop_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_ID);
        result->endWriteParams();
        result->invoke(iceC_MPK_SIP_getStop_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::MPK::StopPrx
IceProxy::MPK::SIP::end_getStop(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MPK_SIP_getStop_name);
    ::MPK::StopPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::MPK::SIP::_newInstance() const
{
    return new SIP;
}
/// \endcond

const ::std::string&
IceProxy::MPK::SIP::ice_staticId()
{
    return ::MPK::SIP::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::MPK::upCast(Stop* p) { return p; }

void
::IceProxy::MPK::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Stop>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Stop;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::MPK::Stop::_iceI_begin_getLines(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MPK_Stop_getLines_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_Stop_getLines_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_Stop_getLines_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_MPK_Stop_getLines_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::MPK::lines
IceProxy::MPK::Stop::end_getLines(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MPK_Stop_getLines_name);
    ::MPK::lines ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::MPK::Stop::_iceI_begin_getID(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MPK_Stop_getID_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_Stop_getID_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_Stop_getID_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_MPK_Stop_getID_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::MPK::Stop::end_getID(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MPK_Stop_getID_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::MPK::Stop::_iceI_begin_getName(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MPK_Stop_getName_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_Stop_getName_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_Stop_getName_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_MPK_Stop_getName_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::std::string
IceProxy::MPK::Stop::end_getName(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MPK_Stop_getName_name);
    ::std::string ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::MPK::Stop::_iceI_begin_getArrivals(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MPK_Stop_getArrivals_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_Stop_getArrivals_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_Stop_getArrivals_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_MPK_Stop_getArrivals_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::MPK::arrivals
IceProxy::MPK::Stop::end_getArrivals(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MPK_Stop_getArrivals_name);
    ::MPK::arrivals ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::MPK::Stop::_iceI_begin_registerUser(const ::MPK::UserPrx& iceP_user, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_Stop_registerUser_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_Stop_registerUser_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_user);
        result->endWriteParams();
        result->invoke(iceC_MPK_Stop_registerUser_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::MPK::Stop::end_registerUser(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_MPK_Stop_registerUser_name);
}

::Ice::AsyncResultPtr
IceProxy::MPK::Stop::_iceI_begin_unregisterUser(const ::MPK::UserPrx& iceP_user, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MPK_Stop_unregisterUser_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_Stop_unregisterUser_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_Stop_unregisterUser_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_user);
        result->endWriteParams();
        result->invoke(iceC_MPK_Stop_unregisterUser_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::MPK::Stop::end_unregisterUser(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MPK_Stop_unregisterUser_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::MPK::noSuchUser&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::MPK::Stop::_newInstance() const
{
    return new Stop;
}
/// \endcond

const ::std::string&
IceProxy::MPK::Stop::ice_staticId()
{
    return ::MPK::Stop::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::MPK::upCast(Line* p) { return p; }

void
::IceProxy::MPK::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Line>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Line;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::MPK::Line::_iceI_begin_getTrams(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MPK_Line_getTrams_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_Line_getTrams_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_Line_getTrams_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_MPK_Line_getTrams_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::MPK::trams
IceProxy::MPK::Line::end_getTrams(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MPK_Line_getTrams_name);
    ::MPK::trams ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::MPK::Line::_iceI_begin_getStops(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MPK_Line_getStops_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_Line_getStops_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_Line_getStops_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_MPK_Line_getStops_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::MPK::stops
IceProxy::MPK::Line::end_getStops(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MPK_Line_getStops_name);
    ::MPK::stops ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::MPK::Line::_iceI_begin_addTram(const ::MPK::TramPrx& iceP_tram, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_Line_addTram_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_Line_addTram_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_tram);
        result->endWriteParams();
        result->invoke(iceC_MPK_Line_addTram_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::MPK::Line::end_addTram(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_MPK_Line_addTram_name);
}

::Ice::AsyncResultPtr
IceProxy::MPK::Line::_iceI_begin_removeTram(const ::MPK::TramPrx& iceP_tram, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MPK_Line_removeTram_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_Line_removeTram_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_Line_removeTram_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_tram);
        result->endWriteParams();
        result->invoke(iceC_MPK_Line_removeTram_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::MPK::Line::end_removeTram(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MPK_Line_removeTram_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::MPK::noSuchTram&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::MPK::Line::_newInstance() const
{
    return new Line;
}
/// \endcond

const ::std::string&
IceProxy::MPK::Line::ice_staticId()
{
    return ::MPK::Line::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::MPK::upCast(Tram* p) { return p; }

void
::IceProxy::MPK::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< Tram>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new Tram;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::MPK::Tram::_iceI_begin_getStop(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MPK_Tram_getStop_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_Tram_getStop_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_Tram_getStop_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_MPK_Tram_getStop_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::MPK::StopPrx
IceProxy::MPK::Tram::end_getStop(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MPK_Tram_getStop_name);
    ::MPK::StopPrx ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::MPK::Tram::_iceI_begin_getStopTime(::Ice::Int iceP_stopid, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MPK_Tram_getStopTime_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_Tram_getStopTime_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_Tram_getStopTime_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_stopid);
        result->endWriteParams();
        result->invoke(iceC_MPK_Tram_getStopTime_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::MPK::TimeOfDay
IceProxy::MPK::Tram::end_getStopTime(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MPK_Tram_getStopTime_name);
    ::MPK::TimeOfDay ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::MPK::Tram::_iceI_begin_getID(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MPK_Tram_getID_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_Tram_getID_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_Tram_getID_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_MPK_Tram_getID_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::Ice::Int
IceProxy::MPK::Tram::end_getID(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MPK_Tram_getID_name);
    ::Ice::Int ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::MPK::Tram::_iceI_begin_getSchedule(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MPK_Tram_getSchedule_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_Tram_getSchedule_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_Tram_getSchedule_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_MPK_Tram_getSchedule_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::MPK::schedule
IceProxy::MPK::Tram::end_getSchedule(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MPK_Tram_getSchedule_name);
    ::MPK::schedule ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::MPK::Tram::_iceI_begin_registerUser(const ::MPK::UserPrx& iceP_user, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_Tram_registerUser_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_Tram_registerUser_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_user);
        result->endWriteParams();
        result->invoke(iceC_MPK_Tram_registerUser_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::MPK::Tram::end_registerUser(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_MPK_Tram_registerUser_name);
}

::Ice::AsyncResultPtr
IceProxy::MPK::Tram::_iceI_begin_unregisterUser(const ::MPK::UserPrx& iceP_user, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_MPK_Tram_unregisterUser_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_Tram_unregisterUser_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_Tram_unregisterUser_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_user);
        result->endWriteParams();
        result->invoke(iceC_MPK_Tram_unregisterUser_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::MPK::Tram::end_unregisterUser(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_MPK_Tram_unregisterUser_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::MPK::noSuchUser&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::MPK::Tram::_newInstance() const
{
    return new Tram;
}
/// \endcond

const ::std::string&
IceProxy::MPK::Tram::ice_staticId()
{
    return ::MPK::Tram::ice_staticId();
}

/// \cond INTERNAL
::IceProxy::Ice::Object* ::IceProxy::MPK::upCast(User* p) { return p; }

void
::IceProxy::MPK::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< User>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new User;
        v->_copyFrom(proxy);
    }
}
/// \endcond

::Ice::AsyncResultPtr
IceProxy::MPK::User::_iceI_begin_updateStop(const ::MPK::TramPrx& iceP_tram, const ::MPK::StopPrx& iceP_stop, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_User_updateStop_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_User_updateStop_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_tram);
        ostr->write(iceP_stop);
        result->endWriteParams();
        result->invoke(iceC_MPK_User_updateStop_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::MPK::User::end_updateStop(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_MPK_User_updateStop_name);
}

::Ice::AsyncResultPtr
IceProxy::MPK::User::_iceI_begin_updateSchedule(const ::MPK::StopPrx& iceP_stop, const ::MPK::arrivals& iceP_arr, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_MPK_User_updateSchedule_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_MPK_User_updateSchedule_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_stop);
        ostr->write(iceP_arr);
        result->endWriteParams();
        result->invoke(iceC_MPK_User_updateSchedule_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::MPK::User::end_updateSchedule(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_MPK_User_updateSchedule_name);
}

/// \cond INTERNAL
::IceProxy::Ice::Object*
IceProxy::MPK::User::_newInstance() const
{
    return new User;
}
/// \endcond

const ::std::string&
IceProxy::MPK::User::ice_staticId()
{
    return ::MPK::User::ice_staticId();
}

MPK::SIP::~SIP()
{
}

/// \cond INTERNAL
::Ice::Object* MPK::upCast(SIP* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_MPK_SIP_ids[2] =
{
    "::Ice::Object",
    "::MPK::SIP"
};

}

bool
MPK::SIP::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_MPK_SIP_ids, iceC_MPK_SIP_ids + 2, s);
}

::std::vector< ::std::string>
MPK::SIP::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_MPK_SIP_ids[0], &iceC_MPK_SIP_ids[2]);
}

const ::std::string&
MPK::SIP::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
MPK::SIP::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::MPK::SIP";
    return typeId;
#else
    return iceC_MPK_SIP_ids[1];
#endif
}

/// \cond INTERNAL
bool
MPK::SIP::_iceD_getLines(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    lines ret = this->getLines(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::SIP::_iceD_addLine(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    LinePrx iceP_line;
    istr->read(iceP_line);
    inS.endReadParams();
    this->addLine(iceP_line, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::SIP::_iceD_removeLine(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    LinePrx iceP_line;
    istr->read(iceP_line);
    inS.endReadParams();
    this->removeLine(iceP_line, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::SIP::_iceD_getStop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_ID;
    istr->read(iceP_ID);
    inS.endReadParams();
    StopPrx ret = this->getStop(iceP_ID, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_MPK_SIP_all[] =
{
    "addLine",
    "getLines",
    "getStop",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "removeLine"
};

}

/// \cond INTERNAL
bool
MPK::SIP::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_MPK_SIP_all, iceC_MPK_SIP_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_MPK_SIP_all)
    {
        case 0:
        {
            return _iceD_addLine(in, current);
        }
        case 1:
        {
            return _iceD_getLines(in, current);
        }
        case 2:
        {
            return _iceD_getStop(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_removeLine(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
MPK::SIP::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< SIP, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
MPK::SIP::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< SIP, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
MPK::_icePatchObjectPtr(SIPPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = SIPPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(SIP::ice_staticId(), v);
    }
}
/// \endcond

MPK::Stop::~Stop()
{
}

/// \cond INTERNAL
::Ice::Object* MPK::upCast(Stop* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_MPK_Stop_ids[2] =
{
    "::Ice::Object",
    "::MPK::Stop"
};

}

bool
MPK::Stop::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_MPK_Stop_ids, iceC_MPK_Stop_ids + 2, s);
}

::std::vector< ::std::string>
MPK::Stop::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_MPK_Stop_ids[0], &iceC_MPK_Stop_ids[2]);
}

const ::std::string&
MPK::Stop::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
MPK::Stop::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::MPK::Stop";
    return typeId;
#else
    return iceC_MPK_Stop_ids[1];
#endif
}

/// \cond INTERNAL
bool
MPK::Stop::_iceD_getLines(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    lines ret = this->getLines(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Stop::_iceD_getID(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::Int ret = this->getID(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Stop::_iceD_getName(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::std::string ret = this->getName(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Stop::_iceD_getArrivals(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    arrivals ret = this->getArrivals(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Stop::_iceD_registerUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_user;
    istr->read(iceP_user);
    inS.endReadParams();
    this->registerUser(iceP_user, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Stop::_iceD_unregisterUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_user;
    istr->read(iceP_user);
    inS.endReadParams();
    this->unregisterUser(iceP_user, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_MPK_Stop_all[] =
{
    "getArrivals",
    "getID",
    "getLines",
    "getName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "registerUser",
    "unregisterUser"
};

}

/// \cond INTERNAL
bool
MPK::Stop::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_MPK_Stop_all, iceC_MPK_Stop_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_MPK_Stop_all)
    {
        case 0:
        {
            return _iceD_getArrivals(in, current);
        }
        case 1:
        {
            return _iceD_getID(in, current);
        }
        case 2:
        {
            return _iceD_getLines(in, current);
        }
        case 3:
        {
            return _iceD_getName(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_registerUser(in, current);
        }
        case 9:
        {
            return _iceD_unregisterUser(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
MPK::Stop::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Stop, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
MPK::Stop::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Stop, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
MPK::_icePatchObjectPtr(StopPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = StopPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Stop::ice_staticId(), v);
    }
}
/// \endcond

MPK::Line::~Line()
{
}

/// \cond INTERNAL
::Ice::Object* MPK::upCast(Line* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_MPK_Line_ids[2] =
{
    "::Ice::Object",
    "::MPK::Line"
};

}

bool
MPK::Line::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_MPK_Line_ids, iceC_MPK_Line_ids + 2, s);
}

::std::vector< ::std::string>
MPK::Line::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_MPK_Line_ids[0], &iceC_MPK_Line_ids[2]);
}

const ::std::string&
MPK::Line::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
MPK::Line::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::MPK::Line";
    return typeId;
#else
    return iceC_MPK_Line_ids[1];
#endif
}

/// \cond INTERNAL
bool
MPK::Line::_iceD_getTrams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    trams ret = this->getTrams(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Line::_iceD_getStops(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    stops ret = this->getStops(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Line::_iceD_addTram(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    TramPrx iceP_tram;
    istr->read(iceP_tram);
    inS.endReadParams();
    this->addTram(iceP_tram, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Line::_iceD_removeTram(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    TramPrx iceP_tram;
    istr->read(iceP_tram);
    inS.endReadParams();
    this->removeTram(iceP_tram, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_MPK_Line_all[] =
{
    "addTram",
    "getStops",
    "getTrams",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "removeTram"
};

}

/// \cond INTERNAL
bool
MPK::Line::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_MPK_Line_all, iceC_MPK_Line_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_MPK_Line_all)
    {
        case 0:
        {
            return _iceD_addTram(in, current);
        }
        case 1:
        {
            return _iceD_getStops(in, current);
        }
        case 2:
        {
            return _iceD_getTrams(in, current);
        }
        case 3:
        {
            return _iceD_ice_id(in, current);
        }
        case 4:
        {
            return _iceD_ice_ids(in, current);
        }
        case 5:
        {
            return _iceD_ice_isA(in, current);
        }
        case 6:
        {
            return _iceD_ice_ping(in, current);
        }
        case 7:
        {
            return _iceD_removeTram(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
MPK::Line::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Line, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
MPK::Line::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Line, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
MPK::_icePatchObjectPtr(LinePtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = LinePtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Line::ice_staticId(), v);
    }
}
/// \endcond

MPK::Tram::~Tram()
{
}

/// \cond INTERNAL
::Ice::Object* MPK::upCast(Tram* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_MPK_Tram_ids[2] =
{
    "::Ice::Object",
    "::MPK::Tram"
};

}

bool
MPK::Tram::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_MPK_Tram_ids, iceC_MPK_Tram_ids + 2, s);
}

::std::vector< ::std::string>
MPK::Tram::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_MPK_Tram_ids[0], &iceC_MPK_Tram_ids[2]);
}

const ::std::string&
MPK::Tram::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
MPK::Tram::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::MPK::Tram";
    return typeId;
#else
    return iceC_MPK_Tram_ids[1];
#endif
}

/// \cond INTERNAL
bool
MPK::Tram::_iceD_getStop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    StopPrx ret = this->getStop(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Tram::_iceD_getStopTime(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Int iceP_stopid;
    istr->read(iceP_stopid);
    inS.endReadParams();
    TimeOfDay ret = this->getStopTime(iceP_stopid, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Tram::_iceD_getID(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::Ice::Int ret = this->getID(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Tram::_iceD_getSchedule(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    schedule ret = this->getSchedule(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Tram::_iceD_registerUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_user;
    istr->read(iceP_user);
    inS.endReadParams();
    this->registerUser(iceP_user, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::Tram::_iceD_unregisterUser(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    UserPrx iceP_user;
    istr->read(iceP_user);
    inS.endReadParams();
    this->unregisterUser(iceP_user, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_MPK_Tram_all[] =
{
    "getID",
    "getSchedule",
    "getStop",
    "getStopTime",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "registerUser",
    "unregisterUser"
};

}

/// \cond INTERNAL
bool
MPK::Tram::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_MPK_Tram_all, iceC_MPK_Tram_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_MPK_Tram_all)
    {
        case 0:
        {
            return _iceD_getID(in, current);
        }
        case 1:
        {
            return _iceD_getSchedule(in, current);
        }
        case 2:
        {
            return _iceD_getStop(in, current);
        }
        case 3:
        {
            return _iceD_getStopTime(in, current);
        }
        case 4:
        {
            return _iceD_ice_id(in, current);
        }
        case 5:
        {
            return _iceD_ice_ids(in, current);
        }
        case 6:
        {
            return _iceD_ice_isA(in, current);
        }
        case 7:
        {
            return _iceD_ice_ping(in, current);
        }
        case 8:
        {
            return _iceD_registerUser(in, current);
        }
        case 9:
        {
            return _iceD_unregisterUser(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
MPK::Tram::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< Tram, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
MPK::Tram::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< Tram, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
MPK::_icePatchObjectPtr(TramPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = TramPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(Tram::ice_staticId(), v);
    }
}
/// \endcond

MPK::User::~User()
{
}

/// \cond INTERNAL
::Ice::Object* MPK::upCast(User* p) { return p; }

/// \endcond

namespace
{
const ::std::string iceC_MPK_User_ids[2] =
{
    "::Ice::Object",
    "::MPK::User"
};

}

bool
MPK::User::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_MPK_User_ids, iceC_MPK_User_ids + 2, s);
}

::std::vector< ::std::string>
MPK::User::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_MPK_User_ids[0], &iceC_MPK_User_ids[2]);
}

const ::std::string&
MPK::User::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
MPK::User::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::MPK::User";
    return typeId;
#else
    return iceC_MPK_User_ids[1];
#endif
}

/// \cond INTERNAL
bool
MPK::User::_iceD_updateStop(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    TramPrx iceP_tram;
    StopPrx iceP_stop;
    istr->read(iceP_tram);
    istr->read(iceP_stop);
    inS.endReadParams();
    this->updateStop(iceP_tram, iceP_stop, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

/// \cond INTERNAL
bool
MPK::User::_iceD_updateSchedule(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    StopPrx iceP_stop;
    arrivals iceP_arr;
    istr->read(iceP_stop);
    istr->read(iceP_arr);
    inS.endReadParams();
    this->updateSchedule(iceP_stop, iceP_arr, current);
    inS.writeEmptyParams();
    return true;
}
/// \endcond

namespace
{
const ::std::string iceC_MPK_User_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "updateSchedule",
    "updateStop"
};

}

/// \cond INTERNAL
bool
MPK::User::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_MPK_User_all, iceC_MPK_User_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_MPK_User_all)
    {
        case 0:
        {
            return _iceD_ice_id(in, current);
        }
        case 1:
        {
            return _iceD_ice_ids(in, current);
        }
        case 2:
        {
            return _iceD_ice_isA(in, current);
        }
        case 3:
        {
            return _iceD_ice_ping(in, current);
        }
        case 4:
        {
            return _iceD_updateSchedule(in, current);
        }
        case 5:
        {
            return _iceD_updateStop(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}
/// \endcond

/// \cond STREAM
void
MPK::User::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    ::Ice::StreamWriter< User, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
MPK::User::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    ::Ice::StreamReader< User, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}
/// \endcond

/// \cond INTERNAL
void
MPK::_icePatchObjectPtr(UserPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = UserPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(User::ice_staticId(), v);
    }
}
/// \endcond

namespace Ice
{
}

#endif
